# 3장 네 변수를 알라

## 변수 선언

```java
int count;
유형  이름
```

- 변수에는 유형이 있어야 함
- 변수에는 이름이 있어야 함

## 변수 값 대입

- 등호 옆에 리터럴 값을 입력하는 방법  → x = 12
- 한 변수의 값을 다른 변수에 대입하는 방법 → x=y
- 위의 두가지 방법을 결합 → x=y+43

## 키워드와 변수명

- 알파벳 글자, 밑줄(_) 또는 달러 기호($)로 시작해야 함 / 숫자는 안됨
- 두번째 문자부터는 숫자로 쓸 수 있음
- 자바 예약어는 안됨

| boolean | byte | char | double | float | int |
| --- | --- | --- | --- | --- | --- |
| long | short | public | private | protected | abstract |
| final | native | static | strictfp | synchronized | transient |
| volatile | if | else | do | while | switch |
| case | default | for | break | continue | assert |
| class | extends | implements | import | instanceof | interface |
| package | super | this | catch | finally | try |
| throw | throws | return | void | const | goto |

## 객체 레퍼런스

```java
Dog d = new Dog();
d.bark();
```

객체 레퍼런스는 또 다른 변수 값에 불과함 

Dog 객체 자체는 변수에 저장되지 않음 

Dog 객체에 접근하는 방법을 나타내는 비트들이 변수에 저장됨

## 객체 선언, 생성과 대입의 3단계

1. 레퍼런스 변수 선언
    
    ```java
    **Dog MyDog** = new dog();
    ```
    
    myDog이라는 레버런스 변수는 Dog 유형의 변수가 됨
    
2. 객체 생성
    
    ```java
    Dog MyDog = **new dog();**
    ```
    
    JVM으로 하여금 힙에 새로운 Dog 객체를 위한 공간을 마련하도록 지시한다
    
3. 객체와 레퍼런스 연결
    
    ```java
    Dog MyDog **=** new dog();
    ```
    
    새로운 Dog 객체를 my Dog라는 레퍼런스 변수에 대입함
    

# 4장 객체의 행동

## 같은 유형에 속하는 모든 객체들이 서로 다른 행동을 하는 메소드를 가질 수 있을까요?

- 가능함
- 특정 클래스의 모든 인스턴스에 들어있는 메소드 자체는 똑같지만 메소드의 행동은 인스턴스 변수의 값에 따라 달라질 수 잇음

## 메소드에 값을 전달할 수도 있음

- 메소드로 전달하는 값을 지칭할 때에는 보통 매개변수(parameter) 또는 인자(argument)라는 용어를 사용함
- 메소드에서 **사용**하는 것: **매개변수**
- 호출하는 쪽에서 **전달**하는 것: **인자**

*메소드에서 매개변수를 받도록 선언했다면 그 메소드를 사용할 때 반드기 뭔가를 전달해야 함

## 메소드에서 뭔가를 돌려받을 수도 있음

- 메소드에서 어떤 값을 돌려줄 수 있음 = 리턴한다
- 리턴 유형을 지정해야함
    - void : 그 메소드에서는 아무것도 리턴하지 않는다.
- 메소드를 선언할 때 리턴하겠다고 선언한 유형의 값만 리턴할 수 있음

```java
**int** theSecret = life.giveSecret ();
// 두 유형은 반드시 같아야 함 

**int** giveSecret() { // giveSecret() 메소드에서는 42를 나타내는 비트들을 리턴하며, 
									// 그 값이 theSecret라는 이름을 가진 변수로 들어간다.
	return 42; // int에 들어갈 수 있는 값이어야 함
}

```

## 메소드에 인자 두 개 이상을 전달할 수도 있음

```java
void go() {
	TestStuff t = new TestStuff();
	t.taketwo(12,34);
}

//이렇게 인자 2개를 보내면 두 인자는 보낸 순서대로 매개변수로 들어감
// 12-> x, 34 -> y

void taketwo (int x, int y) {
	int z=x+y;
	System.out.print("Total is"+z);
}

```

```java
void go() {
	int foo = 7;
	int bar = 3;
	t.taketwo(foo, bar);
}

void taketwo (int x, int y) {
	int z=x+y;
	System.out.print("Total is"+z);
}

```

- 선언할 때 각 매개변수를 쉼표로 구분해서 쓰면 됨
- *메소드에 매개변수가 있을 때 그 유형과 순서를 정확하게 맞춰서 전달해야 함

## 자바에서는 **값**으로 전달함

- 복사본을 전달하는 것임
- 매개변수로 전달된 인자는 복사본을 전달하는 것이기에 메소드에서는 그 메소드를 호출할 때 사용했던 변수에 들어있는 비트는 바꿀 수 없다.

## 매개변수와 리턴 유형 활용 방법

- Getter & Setter
- 어떤 것을 가져오고(get) 설정하는 (set) 역할을 함
- 게터:  게터가 가져오기로 되어있는 값을 리턴값 형태로 받아오기 위한 용도로만 쓰임
- 세터: 세터가 설정할 값을 인자로 받아서 인스턴스 변수를 그 값으로 설정하기 위한 용도로 쓰임

## 캡슐화

- 모든 인스턴스 변수에 대해 세터 메소드를 만들어야 함 → 다른 코드에서 그 데이터에 절대 직접 접근할 수 없도록
- 인스턴스 변수는 private으로, 게터와 세터는 public으로
    
## 인스턴스 변수와 지역 변수의 차이점
1. 인스턴스 변수는 클래스 내에서 선언된다. -> 메소드 내에서 선언되는 것이 아님!!
2. 지역 변수 (local variable)는 메소드 내에서 선언된다.
3. 지역 변수는 사용하기 전에 반드시 초기화해야함

* 지역 변수에는 기본 값이 없음 -> 지역 변수 초기화 전에 사용하려고 하면 컴파일 과정에서 오류남!!


## 변수(원시 변수와 레퍼런스) 비교
- 두 원시값을 비교할 때는 == 연산자를 쓴다
- 레퍼런스 두 개가 똑같은지 (= 즉 힙에 들어있는 똑같은 객체를 참조하는지) 확인할 때도 == 연산자를 쓸 수 있습니다. 
+ 서로 다른 두객체가 똑같은지 알고 싶을 때는 equals() 메소드를 사용하면 된다. 
